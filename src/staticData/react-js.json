{
    "topic": "ReactJS",
    "importantLinks": [{
        "link": "https://itnext.io/add-state-and-lifecycle-methods-to-function-components-with-react-hooks-8e2bdc44d43d", 
        "text": "Hooks for statefull functional components"
    },{
        "link": "https://medium.com/@Zwenza/functional-vs-class-components-in-react-231e3fbd7108",
        "text": "When to choose what components"
    },{
        "link": "https://medium.com/@suhas010/what-the-heck-is-repaint-and-reflow-in-the-browser-b2d0fb980c08",
        "text": "Repainting and Reflow"
    }, {
        "link": "https://www.codingame.com/playgrounds/8595/reactjs-higher-order-components-tutorial#:~:text=A%20higher%2Dorder%20component%20(HOC,the%20advanced%20technique%20in%20React.&text=They%20are%20the%20pattern%20that,Redux's%20connect%20and%20Relay's%20createContainer.",
        "text": "Higher Order Component"
    },{
        "link": "https://medium.com/better-programming/when-to-use-react-purecomponent-723f85738be1#:~:text=PureComponent%20Is%20Primarily%20Used%20for,performance%20boost%20in%20some%20cases.",
        "text": "When to use Pure Components"
    }],
    "logo": "https://javascript-prep.s3.ap-south-1.amazonaws.com/react-logo.png",
    "questionsAndAnswers":[{
        "question": "React and Virtual Dom",
        "answer": "<p>React creates a virtual DOM. When state changes in a component it firstly runs a <strong>diffing</strong> algorithm, which identifies what has changed in the virtual DOM. The second step is reconciliation, where it updates the DOM with the results of diff. Whenever a ReactComponent is changing the state, diff algorithm in React runs and identifies what has changed. And then it updates the DOM with the results of diff. The point is - it’s done faster than it would be in the regular DOM.</p> "
    }, {
        "question": "Lifecycle of react components",
        "answer": "<ul> <li><strong>Initialization</strong> where constructor function is called to set things up, generally states and props.</li> <li><strong>Mounting</strong> Component renders for the first time and 2 methods are available- <em>ComponentDidMount</em> and <em>ComponentWillMount</em>. How it happens is, willMount is called just before the render method and is called only once in the entire lifecycle. After render method didMount is called.</li> <li><strong>Updating</strong> where component&#39;s state and props changes and it re renders on the page. 4 methods are available at this time:</li> </ul> <p><em>componentWillReceiveProps</em> receives props, </p> <p> <em>ShouldComponentUpdate</em> is called just before the component is re rendered and tells whether the component should be updated or not. By default, it returns true.</p> <p><em>componentWillUpdate</em> it is called just before the new component gets rendered.</p> <p><em>componentDidUpdate</em> This method is called just after the re-rendering of the component. You will have access to the previous props and state with prevProp and prevState as well as the current ones, and you can use this method to update any third party libraries if they happen to need an update due to the re-render.</p> <ul> <li><strong>Unmounting</strong> : At the unmounting stage, the component gets deleted and removed from the page. The only lifecycle method at this stage is componentWillUnmount, which is called just before the component gets deleted. It is used to clear anything that was set up in componentDidMount</li> </ul> "
    }, {
        "question": "How does virtual DOM know what has changed in the list of elements",
        "answer": "When state changes occur, the virtual DOM is updated and the previous and current version of virtual DOM is compared. This is called <strong>diffing</strong>. The virtual DOM then sends a batch update to the real DOM to update the UI. <br /> React doesn’t really do anything new. It’s just a strategic move. What it does is It stores a replica of real DOM in memory. When you modify the DOM, it first applies these changes to the in-memory DOM. Then, using it’s diffing algorithm, figures out what has really changed. Finally, it batches the changes and call applies them on real-dom in one go. Thus, minimizing the re-flow and re-paint."
    }, {
        "question": "React.createElement()",
        "answer": "<p><code>React.createElement( type, [props], [...children] )</code> Create and return a new React element of the given type. The type argument can be either a tag name string (such as &#39;div&#39; or &#39;span&#39;), a React component type (a class or a function), or a React fragment type.</p>"
    }, {
        "question": "Why React?",
        "answer": "<ul><li>Virtual DOM.</li><li>It’s Easier to Learn for developers.</li><li>React enables developers to reuse components.</li><li>It provides a unique Abstraction Layer: It provides a good abstraction layer, which means an end-user can’t access the complex internals.</li></ul>"
    }, {
        "question": "How to make use of component lifecycle in functional methods",
        "answer": "Use React Hooks to use states in functional components. Read more about it in the important links section."
    }, {
        "question": "Differences between functional and class components",
        "answer": "Refer to the important links."
    }, {
        "question": "Differences between Repainting and Reflow",
        "answer": "Refer to the important links."
    }, {
        "question": "React is unidirectional or bidirectional. Explain unidirectional flow.",
        "answer": "React is unidirectional. <br/> Unidirection flow is one where you can pass on data in any one direction (either always parent to child or always child to parent). <br/> React JS is an unidirectional flow wherein data can be passed only from parent to child."
    }, {
        "question": "Why is setState() async",
        "answer": "setState() is async because React intelligently combines several setState functions into one and thus, change the virtual DOM only once for several setState calls performed in a short span of time. Also, there is no guarantee that the state has been updated if we try to access the value immediately"
    }, {
        "question": "Is there any memory leak in react?",
        "answer": "Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method."
    }, {
        "question": "examples of HOC",
        "answer": "Refer to important links"
    }, {
        "question": "how do you create react builds",
        "answer": "We use <strong>npm</strong> to create react builds. Using the commands <code>npm run build</code>. Ususally the build script is run using this command. Commonly the build script is used to create minified deployable versions of all the javascript code into one, all the css code into one and all HTML into one."
    }, {
        "question": "What are Pure Components",
        "answer": "React.PureComponent is similar to React.Component. The difference between them is that React.Component doesn’t implement shouldComponentUpdate(), but React.PureComponent implements it with a shallow prop and state comparison. If your React component’s render() function renders the same result given the same props and state, you can use React.PureComponent for a performance boost in some cases."
    },{
        "question": "Alternative of React.PureComponent",
        "answer": ""
    },{
        "question": "If parent component contains a child component, Will child component re renders if render function of parent is called?",
        "answer": "Yes, and to avoid this we should use pure components."
    },{
        "question": "if there are multiple css files in components and one in global how are they loaded?",
        "answer": ""
    },{
        "question": "If you have a lot of components and page is taking a lot of time to load how will you check where is the code failing?",
        "answer": ""
    },{
        "question": "How to do server side rendering?",
        "answer": ""
    },{
        "question": "React lazy loading and Suspense",
        "answer": "React.lazy() and < Suspense />"
    },{
        "question": "how to cancel fetch operation if previous fetch didn't return a response?",
        "answer": ""
    },{
        "question": "Apply something in a DOM node like document.getElementById in react",
        "answer": "use React.findDOMNode()"
    },{
        "question": "Reason behind not using id as an index in map",
        "answer": ""
    },{
        "question": "Difference between state and props",
        "answer": ""
    },{
        "question": "Why should we not mutate state directly? By assigning like <code>this.state.a = 10</code>",
        "answer": "setState() is not immediate. It queues a state transition based on what it thinks is going on which may not include the direct changes to this.state. Since it's queued rather than applied immediately, it's entirely possible that something is modified in between such that your direct changes get overwritten. Basically, if you modify this.state directly, you create a situation where those modifications might get overwritten."
    },{
        "question": "Why this.setState should not be called inside render method?",
        "answer": " setState() calls render, and calling a function mutating the state inside render generally leads to an infinite loop."
    }]
}